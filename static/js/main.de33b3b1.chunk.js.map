{"version":3,"sources":["models.ts","utils/getGrid.ts","components/CrosswordSquare.tsx","components/CrosswordBoardRow.tsx","components/CrosswordBoard.tsx","App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["Direction","directionToDisplacement","ACROSS","DOWN","getGrid","crossword","numRows","numCols","clues","defaultSquareState","disabled","letter","emptyRow","Array","from","length","Object","assign","grid","map","sq","forEach","clue","idx","clueSquares","count","startPosition","row","startRow","col","startCol","direction","currPosition","displacement","nextPositionRow","nextPositionCol","nextPosition","push","getClueSquares","clueSquarePositions","position","fillGridBlanks","CrosswordSquare","numberLabel","type","className","maxLength","CrosswordBoardRow","content","square","CrosswordBoard","MockData","console","log","App","Boolean","window","location","hostname","match","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0NAAYA,E,iEAAAA,K,gBAAAA,E,aAAAA,M,KCyBZ,IAAMC,GAAuB,mBAC1BD,EAAUE,OAAS,CAAC,EAAG,IADG,cAE1BF,EAAUG,KAAO,CAAC,EAAG,IAFK,GAkDdC,MAxEf,SAAiBC,GAAkD,IACzDC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,QAASC,EAAUH,EAAVG,MACpBC,EAA2C,CAC/CC,UAAU,EACVC,OAAQ,IAGJC,EAAWC,MAAMC,KAAK,CAAEC,OAAQR,IAAW,kBAC/CS,OAAOC,OAAO,GAAIR,MAEhBS,EAAOL,MAAMC,KAAK,CAAEC,OAAQT,IAAW,kBACzCM,EAASO,KAAI,SAAAC,GAAE,OAAIJ,OAAOC,OAAO,GAAIG,SAQvC,OALAZ,EAAMa,SAAQ,SAACC,EAAMC,GACnB,IAAMC,EAYV,SAAwBF,GACtB,IAAIG,EAAQH,EAAKP,OACXW,EAA0B,CAC9BC,IAAKL,EAAKM,SACVC,IAAKP,EAAKQ,UAGNC,EAAYT,EAAKS,UAEjBP,EAAc,CAACE,GACjBM,EAAeN,EAEbO,EAAehC,EAAwB8B,GAE7C,KAAON,EAAQD,EAAYT,QAAQ,CACjC,IAAMmB,EAAkBF,EAAaL,IAAMM,EAAa,GAClDE,EAAkBH,EAAaH,IAAMI,EAAa,GAClDG,EAAe,CACnBT,IAAKO,EACLL,IAAKM,GAEPH,EAAeI,EAEfZ,EAAYa,KAAKD,GAEnB,OAAOZ,EArCec,CAAehB,GACnCJ,EA4CJ,SACEA,EACAqB,GAOA,OALAA,EAAoBlB,SAAQ,SAAAmB,GAAa,IAC/Bb,EAAaa,EAAbb,IAAKE,EAAQW,EAARX,IACbX,EAAKS,GAAKE,GAAKnB,UAAW,KAGrBQ,EArDEuB,CAAevB,EAAMM,MAGvBN,GCCMwB,EAfmC,SAAC,GAI7C,EAHJhC,SAGI,EAFJC,OAEI,EADJgC,YAGA,OACE,2BAAOC,KAAK,OAAOC,UAAU,mBAAmBC,UAAW,KCAhDC,EAPuC,SAAC,GAAa,IAC5DC,EAD2D,EAAVrB,IACnCR,KAAI,SAAA8B,GAAM,OAC5B,kBAAC,EAAD,CAAiBvC,SAAUuC,EAAOvC,SAAUC,OAAQsC,EAAOtC,YAE7D,OAAO,yBAAKkC,UAAU,uBAAuBG,I,OCehCE,EAdiC,SAAC,GAA0B,IAAxB5C,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACpDW,EAAOd,EAAQ+C,GACrBC,QAAQC,IAAInC,GAEZ,IAAMb,EAAYa,EAAKC,KAAI,SAAAQ,GAAG,OAAI,kBAAC,EAAD,CAAmBA,IAAKA,OAE1D,OACE,mEAC+BrB,EAD/B,KAC0CC,EAD1C,IAEE,yBAAKsC,UAAU,4BAA4BxC,KCRlCiD,MATf,WACE,OACE,yBAAKT,UAAU,OACb,4CACA,kBAAC,EAAD,CAAgBvC,QAAS,GAAIC,QAAS,OCGxBgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCfAC,EAAUC,YADC,IAKFC,EAFDC,YAAYH,GCI1BI,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SF8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.de33b3b1.chunk.js","sourcesContent":["export enum Direction {\n  ACROSS = 'ACROSS',\n  DOWN = 'DOWN'\n}\n\n// typ;\n\nexport interface IClue {\n  number: number;\n  description: string;\n  startRow: number;\n  startCol: number;\n  direction: string;\n  length: number;\n  answer?: string;\n}\n\nexport interface ICrossword {\n  numRows: number;\n  numCols: number;\n  clues: IClue[];\n}\n","import { ICrossword, IClue, Direction } from '../models';\nimport { CrosswordSquareProps } from '../components/CrosswordSquare';\n\nfunction getGrid(crossword: ICrossword): CrosswordSquareProps[][] {\n  const { numRows, numCols, clues } = crossword;\n  const defaultSquareState: CrosswordSquareProps = {\n    disabled: true,\n    letter: ''\n  };\n\n  const emptyRow = Array.from({ length: numCols }, () =>\n    Object.assign({}, defaultSquareState)\n  );\n  let grid = Array.from({ length: numRows }, () =>\n    emptyRow.map(sq => Object.assign({}, sq))\n  );\n\n  clues.forEach((clue, idx) => {\n    const clueSquares = getClueSquares(clue);\n    grid = fillGridBlanks(grid, clueSquares);\n  });\n\n  return grid;\n}\n\nconst directionToDisplacement = {\n  [Direction.ACROSS]: [0, 1],\n  [Direction.DOWN]: [1, 0]\n};\n\nfunction getClueSquares(clue: IClue): Position[] {\n  let count = clue.length;\n  const startPosition: Position = {\n    row: clue.startRow,\n    col: clue.startCol\n  };\n\n  const direction = clue.direction as Direction;\n\n  const clueSquares = [startPosition];\n  let currPosition = startPosition;\n\n  const displacement = directionToDisplacement[direction];\n\n  while (count > clueSquares.length) {\n    const nextPositionRow = currPosition.row + displacement[0];\n    const nextPositionCol = currPosition.col + displacement[1];\n    const nextPosition = {\n      row: nextPositionRow,\n      col: nextPositionCol\n    };\n    currPosition = nextPosition;\n\n    clueSquares.push(nextPosition);\n  }\n  return clueSquares;\n}\n\ntype Position = {\n  row: number;\n  col: number;\n};\n\nfunction fillGridBlanks(\n  grid: CrosswordSquareProps[][],\n  clueSquarePositions: Position[]\n): CrosswordSquareProps[][] {\n  clueSquarePositions.forEach(position => {\n    const { row, col } = position;\n    grid[row][col].disabled = false;\n  });\n\n  return grid;\n}\n\nexport default getGrid;\n","import React, { FC } from 'react';\n\nexport type CrosswordSquareProps = {\n  disabled: boolean;\n  letter: string;\n  numberLabel?: number;\n};\n\nconst CrosswordSquare: FC<CrosswordSquareProps> = ({\n  disabled,\n  letter,\n  numberLabel\n}) => {\n  const content = disabled ? '#' : '';\n  return (\n    <input type='text' className='crossword-square' maxLength={1} />\n    // <div className='crossword-square'>\n    //   {content}\n\n    // </div>\n  );\n};\n\nexport default CrosswordSquare;\n","import React, { FC } from 'react';\n\nimport CrosswordSquare, { CrosswordSquareProps } from './CrosswordSquare';\n\ntype CrosswordBoardRowProps = {\n  row: CrosswordSquareProps[];\n};\n\nconst CrosswordBoardRow: FC<CrosswordBoardRowProps> = ({ row }) => {\n  const content = row.map(square => (\n    <CrosswordSquare disabled={square.disabled} letter={square.letter} />\n  ));\n  return <div className='crossword-board-row'>{content}</div>;\n};\n\nexport default CrosswordBoardRow;\n","import React, { FC } from 'react';\n\nimport CrosswordSquare from './CrosswordSquare';\nimport getGrid from '../utils/getGrid';\nimport CrosswordBoardRow from './CrosswordBoardRow';\n\nimport MockData from '../mock-data/20200220.json';\n\ntype CrosswordBoardProps = {\n  numRows: number;\n  numCols: number;\n};\n\nconst CrosswordBoard: FC<CrosswordBoardProps> = ({ numRows, numCols }) => {\n  const grid = getGrid(MockData);\n  console.log(grid);\n\n  const crossword = grid.map(row => <CrosswordBoardRow row={row} />);\n\n  return (\n    <>\n      Hi this is a board of size ({numRows}, {numCols})\n      <div className='crossword-grid-container'>{crossword}</div>\n    </>\n  );\n};\n\nexport default CrosswordBoard;\n","import React from 'react';\nimport './App.css';\n\nimport CrosswordBoard from './components/CrosswordBoard';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div>hello world</div>\n      <CrosswordBoard numRows={15} numCols={15} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from 'redux';\n\nconst reducers = {};\nconst reducer = combineReducers(reducers);\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}