{"version":3,"sources":["models.ts","utils/getGrid.ts","utils/getCluesOfType.ts","components/CrosswordSquare.tsx","components/CrosswordBoardRow.tsx","components/ClueList.tsx","components/CrosswordBoard.tsx","App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["Direction","directionToDisplacement","ACROSS","DOWN","getGrid","crossword","numRows","numCols","clues","defaultSquareState","disabled","letter","emptyRow","Array","from","length","Object","assign","grid","map","sq","forEach","clue","idx","clueSquares","count","startPosition","row","startRow","col","startCol","direction","currPosition","displacement","nextPositionRow","nextPositionCol","nextPosition","push","getClueSquares","clueSquarePositions","position","fillGridBlanks","numberLabel","number","getCluesOfType","filter","CrosswordSquare","rowIndex","colIndex","selectedPosition","setSelectedRow","setSelectedCol","useState","character","setCharacter","inputElement","useRef","current","focus","handleChange","useCallback","evt","currentTarget","value","moveCursorToEnd","tempValue","className","String","id","type","maxLength","onChange","ref","onFocus","onClick","CrosswordBoardRow","selectedCol","content","square","colIdx","key","ClueList","list","description","CrosswordBoard","MockData","acrossClues","downClues","selectedRow","console","log","handleKeyDown","currentPosition","keyCode","nextRow","nextCol","Math","max","min","getNextPosition","onKeyDown","App","Boolean","window","location","hostname","match","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.234730be.chunk.js","sourcesContent":["export enum Direction {\n  ACROSS = 'ACROSS',\n  DOWN = 'DOWN'\n}\n\n// typ;\n\nexport interface IClue {\n  number: number;\n  description: string;\n  startRow: number;\n  startCol: number;\n  direction: string;\n  length: number;\n  answer?: string;\n}\n\nexport interface ICrossword {\n  numRows: number;\n  numCols: number;\n  clues: IClue[];\n}\n\nexport type Position = {\n  row: number;\n  col: number;\n};\n","import { ICrossword, IClue, Direction, Position } from '../models';\nimport { CrosswordSquareProps } from '../components/CrosswordSquare';\n\nfunction getGrid(crossword: ICrossword): CrosswordSquareProps[][] {\n  const { numRows, numCols, clues } = crossword;\n  const defaultSquareState: CrosswordSquareProps = {\n    disabled: true,\n    letter: ''\n  };\n\n  const emptyRow = Array.from({ length: numCols }, () =>\n    Object.assign({}, defaultSquareState)\n  );\n  let grid = Array.from({ length: numRows }, () =>\n    emptyRow.map(sq => Object.assign({}, sq))\n  );\n\n  clues.forEach((clue, idx) => {\n    const clueSquares = getClueSquares(clue);\n    grid = fillGridBlanks(grid, clueSquares);\n  });\n\n  clues.forEach(clue => {\n    grid[clue.startRow][clue.startCol].numberLabel = clue.number;\n  });\n\n  return grid;\n}\n\nconst directionToDisplacement = {\n  [Direction.ACROSS]: [0, 1],\n  [Direction.DOWN]: [1, 0]\n};\n\nfunction getClueSquares(clue: IClue): Position[] {\n  let count = clue.length;\n  const startPosition: Position = {\n    row: clue.startRow,\n    col: clue.startCol\n  };\n\n  const direction = clue.direction as Direction;\n\n  const clueSquares = [startPosition];\n  let currPosition = startPosition;\n\n  const displacement = directionToDisplacement[direction];\n\n  while (count > clueSquares.length) {\n    const nextPositionRow = currPosition.row + displacement[0];\n    const nextPositionCol = currPosition.col + displacement[1];\n    const nextPosition = {\n      row: nextPositionRow,\n      col: nextPositionCol\n    };\n    currPosition = nextPosition;\n\n    clueSquares.push(nextPosition);\n  }\n  return clueSquares;\n}\n\nfunction fillGridBlanks(\n  grid: CrosswordSquareProps[][],\n  clueSquarePositions: Position[]\n): CrosswordSquareProps[][] {\n  clueSquarePositions.forEach(position => {\n    const { row, col } = position;\n    grid[row][col].disabled = false;\n  });\n\n  return grid;\n}\n\nexport default getGrid;\n","import { ICrossword, IClue, Direction } from '../models';\n\nfunction getCluesOfType(crossword: ICrossword, direction: Direction): IClue[] {\n  const clues = crossword.clues;\n  return clues.filter(clue => clue.direction === direction);\n}\n\nexport default getCluesOfType;\n","import React, { FC, useState, useCallback, useRef } from 'react';\n\nimport { Position } from '../models';\n\nexport type CrosswordSquareProps = {\n  disabled: boolean;\n  letter: string;\n  numberLabel?: number;\n  rowIndex?: number;\n  colIndex?: number;\n  selectedPosition?: Position;\n  setSelectedRow?: (idx: number) => void;\n  setSelectedCol?: (idx: number) => void;\n};\n\nconst CrosswordSquare: FC<CrosswordSquareProps> = ({\n  disabled,\n  letter,\n  numberLabel,\n  rowIndex,\n  colIndex,\n  selectedPosition,\n  setSelectedRow,\n  setSelectedCol\n}) => {\n  const [character, setCharacter] = useState(disabled ? '#' : '');\n\n  const inputElement = useRef<HTMLInputElement>(null);\n\n  if (\n    rowIndex === selectedPosition?.row &&\n    colIndex === selectedPosition?.col\n  ) {\n    if (inputElement && inputElement.current) {\n      inputElement.current.focus();\n    }\n  }\n\n  const handleChange = useCallback(\n    (evt: React.FormEvent<HTMLInputElement>) => {\n      setCharacter(evt.currentTarget.value);\n    },\n    [setCharacter]\n  );\n\n  // TODO: fix this up\n  const moveCursorToEnd = useCallback(\n    (evt: React.FormEvent<HTMLInputElement>) => {\n      const tempValue = evt.currentTarget.value;\n      evt.currentTarget.value = '';\n      evt.currentTarget.value = tempValue;\n    },\n    []\n  );\n\n  const handleClick = () => {\n    // TODO: Make prop types more robust\n    if (setSelectedRow && setSelectedCol && rowIndex && colIndex) {\n      setSelectedRow(rowIndex);\n      setSelectedCol(colIndex);\n    }\n  };\n\n  return (\n    <div className={'crossword-square'}>\n      {/* <label htmlFor='square'>l</label> */}\n      <div className='square-label'>\n        {numberLabel ? String(numberLabel) : ''}\n      </div>\n      <input\n        id='square'\n        type='text'\n        // className='crossword-square'\n        className={disabled ? 'square-disabled' : ''}\n        maxLength={1}\n        value={disabled ? '' : character}\n        onChange={handleChange}\n        ref={inputElement}\n        disabled={disabled}\n        onFocus={moveCursorToEnd}\n        onClick={handleClick}\n        // placeholder={numberLabel ? String(numberLabel) : ''}\n      />\n    </div>\n  );\n};\n\nexport default CrosswordSquare;\n","import React, { FC } from 'react';\n\nimport CrosswordSquare, { CrosswordSquareProps } from './CrosswordSquare';\nimport { Position } from '../models';\n\ntype CrosswordBoardRowProps = {\n  row: CrosswordSquareProps[];\n  selectedPosition: Position;\n  selectedCol: number;\n  rowIndex: number;\n  setSelectedRow?: (idx: number) => void;\n  setSelectedCol?: (idx: number) => void;\n};\n\nconst CrosswordBoardRow: FC<CrosswordBoardRowProps> = ({\n  row,\n  selectedPosition,\n  selectedCol,\n  rowIndex,\n  setSelectedRow,\n  setSelectedCol\n}) => {\n  const content = row.map((square, colIdx) => (\n    <CrosswordSquare\n      key={colIdx}\n      disabled={square.disabled}\n      letter={square.letter}\n      rowIndex={rowIndex}\n      colIndex={colIdx}\n      selectedPosition={selectedPosition}\n      setSelectedRow={setSelectedRow}\n      setSelectedCol={setSelectedCol}\n      numberLabel={square.numberLabel}\n    />\n  ));\n  return <div className='crossword-board-row'>{content}</div>;\n};\n\nexport default CrosswordBoardRow;\n","import React, { FC } from 'react';\nimport { IClue } from '../models';\n\ntype ClueListProps = {\n  clues: IClue[];\n};\n\nconst ClueList: FC<ClueListProps> = ({ clues }) => {\n  // return <div>Across</div>;\n  const list = clues.map(clue => {\n    return (\n      <span>\n        {clue.number}. {clue.description}\n        <br />\n      </span>\n    );\n  });\n  return <ul>{list}</ul>;\n};\n\nexport default ClueList;\n","import React, { FC, useState, useCallback } from 'react';\n\nimport CrosswordSquare from './CrosswordSquare';\nimport getGrid from '../utils/getGrid';\nimport getCluesOfType from '../utils/getCluesOfType';\nimport CrosswordBoardRow from './CrosswordBoardRow';\nimport { Position, Direction } from '../models';\n\nimport MockData from '../mock-data/20200220.json';\nimport ClueList from './ClueList';\n\ntype CrosswordBoardProps = {\n  numRows: number;\n  numCols: number;\n};\n\nconst KEY_LEFT_CODE = 37;\nconst KEY_UP_CODE = 38;\nconst KEY_RIGHT_CODE = 39;\nconst KEY_DOWN_CODE = 40;\n\nfunction getNextPosition(currentPosition: Position, keyCode: number): Position {\n  let { row: nextRow, col: nextCol } = currentPosition;\n\n  if (keyCode === KEY_LEFT_CODE) {\n    nextCol = Math.max(nextCol - 1, 0);\n  } else if (keyCode === KEY_RIGHT_CODE) {\n    // TODO: remove hard coded 14\n    nextCol = Math.min(nextCol + 1, 14);\n  } else if (keyCode === KEY_UP_CODE) {\n    nextRow = Math.max(nextRow - 1, 0);\n  } else if (keyCode === KEY_DOWN_CODE) {\n    nextRow = Math.min(nextRow + 1, 14);\n  }\n\n  return {\n    row: nextRow,\n    col: nextCol\n  };\n}\n\nconst CrosswordBoard: FC<CrosswordBoardProps> = ({ numRows, numCols }) => {\n  const grid = getGrid(MockData);\n  const acrossClues = getCluesOfType(MockData, Direction.ACROSS);\n  const downClues = getCluesOfType(MockData, Direction.DOWN);\n  const [selectedRow, setSelectedRow] = useState(0);\n  const [selectedCol, setSelectedCol] = useState(0);\n\n  console.log(acrossClues, downClues);\n\n  const crossword = grid.map((row, idx) => (\n    <CrosswordBoardRow\n      row={row}\n      selectedPosition={{ row: selectedRow, col: selectedCol }}\n      selectedCol={selectedCol}\n      rowIndex={idx}\n      key={idx}\n      setSelectedCol={setSelectedCol}\n      setSelectedRow={setSelectedRow}\n    />\n  ));\n\n  const handleKeyDown = useCallback(\n    (evt: React.KeyboardEvent) => {\n      const nextPosition = getNextPosition(\n        { row: selectedRow, col: selectedCol },\n        evt.keyCode\n      );\n      setSelectedRow(nextPosition.row);\n      setSelectedCol(nextPosition.col);\n    },\n    [selectedRow, setSelectedRow, selectedCol, setSelectedCol]\n  );\n\n  return (\n    <>\n      <br />\n      Type in any square to fill it with a letter. I recommend filling out the\n      disabled squares of the crossword with a '#' or any other special\n      character.\n      <br />\n      <br />\n      Also, sorry that backspacing on the squares is weird\n      <br />\n      <br />\n      <br />\n      <div className='crossword-grid-container' onKeyDown={handleKeyDown}>\n        {crossword}\n      </div>\n      <br />\n      <h4>Across</h4>\n      <ClueList clues={acrossClues} />\n      <h4>Down</h4>\n      <ClueList clues={downClues} />\n    </>\n  );\n};\n\nexport default CrosswordBoard;\n","import React from 'react';\nimport './App.css';\n\nimport CrosswordBoard from './components/CrosswordBoard';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <CrosswordBoard numRows={15} numCols={15} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from 'redux';\n\nconst reducers = {};\nconst reducer = combineReducers(reducers);\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}